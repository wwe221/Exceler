from PyQt5 import QtCore, QtGui, QtWidgetsfrom PyQt5.QtWidgets import *from functools import partialimport sqlite3import Readerconn = sqlite3.connect("Exc.db")cur = conn.cursor()class Ui_Dialog(object):    #Reader.init(conn)    global sap    sap = []    global checkBoxs    checkBoxs = [True for i in range(12)]    global checkBoxsB    checkBoxsB = []    def setupUi(self, Dialog):        Dialog.setObjectName("Dialog")        Dialog.resize(1417, 832)        Dialog.setLayoutDirection(QtCore.Qt.LeftToRight)        Dialog.setAutoFillBackground(False)        self.gridLayout_3 = QtWidgets.QGridLayout(Dialog)        self.gridLayout_3.setObjectName("gridLayout_3")        self.tabWidget = QtWidgets.QTabWidget(Dialog)        font = QtGui.QFont()        font.setFamily("새굴림")        self.tabWidget.setFont(font)        self.tabWidget.setLayoutDirection(QtCore.Qt.LeftToRight)        self.tabWidget.setObjectName("tabWidget")        self.tap1 = QtWidgets.QWidget()        self.tap1.setObjectName("tap1")        self.tableWidget = QtWidgets.QTableWidget(self.tap1)        self.tableWidget.setGeometry(QtCore.QRect(10, 90, 1341, 701))        self.tableWidget.setObjectName("tableWidget")        self.tableWidget.setColumnCount(14)        self.tableWidget.setRowCount(0)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(0, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(1, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(2, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(3, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(4, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(5, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(6, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(7, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(8, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(9, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(10, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(11, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(12, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget.setHorizontalHeaderItem(13, item)        self.gridLayoutWidget = QtWidgets.QWidget(self.tap1)        self.gridLayoutWidget.setGeometry(QtCore.QRect(110, 0, 791, 52))        self.gridLayoutWidget.setObjectName("gridLayoutWidget")        self.checkBoxGrid = QtWidgets.QGridLayout(self.gridLayoutWidget)        self.checkBoxGrid.setContentsMargins(0, 0, 0, 0)        self.checkBoxGrid.setObjectName("checkBoxGrid")        self.verticalLayout = QtWidgets.QVBoxLayout()        self.verticalLayout.setObjectName("verticalLayout")        self.horizontalLayout = QtWidgets.QHBoxLayout()        self.horizontalLayout.setObjectName("horizontalLayout")        self.checkBox = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox.setObjectName("checkBox")        self.horizontalLayout.addWidget(self.checkBox)        self.checkBox_2 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_2.setObjectName("checkBox_2")        self.horizontalLayout.addWidget(self.checkBox_2)        self.checkBox_3 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_3.setObjectName("checkBox_3")        self.horizontalLayout.addWidget(self.checkBox_3)        self.checkBox_4 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_4.setObjectName("checkBox_4")        self.horizontalLayout.addWidget(self.checkBox_4)        self.checkBox_5 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_5.setObjectName("checkBox_5")        self.horizontalLayout.addWidget(self.checkBox_5)        self.checkBox_6 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_6.setObjectName("checkBox_6")        self.horizontalLayout.addWidget(self.checkBox_6)        self.verticalLayout.addLayout(self.horizontalLayout)        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()        self.horizontalLayout_2.setObjectName("horizontalLayout_2")        self.checkBox_7 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_7.setObjectName("checkBox_7")        self.horizontalLayout_2.addWidget(self.checkBox_7)        self.checkBox_8 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_8.setObjectName("checkBox_8")        self.horizontalLayout_2.addWidget(self.checkBox_8)        self.checkBox_9 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_9.setObjectName("checkBox_9")        self.horizontalLayout_2.addWidget(self.checkBox_9)        self.checkBox_10 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_10.setObjectName("checkBox_10")        self.horizontalLayout_2.addWidget(self.checkBox_10)        self.checkBox_11 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_11.setObjectName("checkBox_11")        self.horizontalLayout_2.addWidget(self.checkBox_11)        self.checkBox_12 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_12.setObjectName("checkBox_12")        self.horizontalLayout_2.addWidget(self.checkBox_12)        self.checkBox_13 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_13.setObjectName("checkBox_13")        self.horizontalLayout_2.addWidget(self.checkBox_13)        self.checkBox_14 = QtWidgets.QCheckBox(self.gridLayoutWidget)        self.checkBox_14.setObjectName("checkBox_14")        self.horizontalLayout_2.addWidget(self.checkBox_14)        self.verticalLayout.addLayout(self.horizontalLayout_2)        self.checkBoxGrid.addLayout(self.verticalLayout, 0, 0, 1, 1)        self.resetButton = QtWidgets.QPushButton(self.tap1)        self.resetButton.setGeometry(QtCore.QRect(10, 10, 81, 21))        self.resetButton.setObjectName("resetButton")        self.label = QtWidgets.QLabel(self.tap1)        self.label.setGeometry(QtCore.QRect(20, 61, 851, 21))        self.label.setFrameShape(QtWidgets.QFrame.NoFrame)        self.label.setWordWrap(False)        self.label.setObjectName("label")        self.allButton = QtWidgets.QPushButton(self.tap1)        self.allButton.setGeometry(QtCore.QRect(10, 40, 81, 21))        self.allButton.setObjectName("allButton")        self.shareLabel = QtWidgets.QLabel(self.tap1)        self.shareLabel.setGeometry(QtCore.QRect(500, 60, 61, 21))        self.shareLabel.setObjectName("shareLabel")        self.shareLabel_2 = QtWidgets.QLabel(self.tap1)        self.shareLabel_2.setGeometry(QtCore.QRect(610, 60, 61, 21))        self.shareLabel_2.setObjectName("shareLabel_2")        self.shareLabel_3 = QtWidgets.QLabel(self.tap1)        self.shareLabel_3.setGeometry(QtCore.QRect(700, 60, 61, 21))        self.shareLabel_3.setObjectName("shareLabel_3")        self.tabWidget.addTab(self.tap1, "")        self.tab_2 = QtWidgets.QWidget()        self.tab_2.setObjectName("tab_2")        self.tableWidget_2 = QtWidgets.QTableWidget(self.tab_2)        self.tableWidget_2.setGeometry(QtCore.QRect(0, 90, 1341, 701))        self.tableWidget_2.setObjectName("tableWidget_2")        self.tableWidget_2.setColumnCount(14)        self.tableWidget_2.setRowCount(0)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(0, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(1, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(2, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(3, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(4, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(5, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(6, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(7, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(8, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(9, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(10, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(11, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(12, item)        item = QtWidgets.QTableWidgetItem()        self.tableWidget_2.setHorizontalHeaderItem(13, item)        self.comboBox = QtWidgets.QComboBox(self.tab_2)        self.comboBox.setGeometry(QtCore.QRect(10, 10, 101, 22))        self.comboBox.setObjectName("comboBox")        self.searchEdit = QtWidgets.QLineEdit(self.tab_2)        self.searchEdit.setGeometry(QtCore.QRect(120, 10, 161, 20))        self.searchEdit.setObjectName("searchEdit")        self.searchButton = QtWidgets.QPushButton(self.tab_2)        self.searchButton.setGeometry(QtCore.QRect(340, 40, 75, 23))        self.searchButton.setObjectName("searchButton")        self.tabWidget.addTab(self.tab_2, "")        self.tab_3 = QtWidgets.QWidget()        self.tab_3.setObjectName("tab_3")        self.tabWidget.addTab(self.tab_3, "")        self.gridLayout_3.addWidget(self.tabWidget, 0, 0, 1, 1)        self.retranslateUi(Dialog)        self.tabWidget.setCurrentIndex(1)        QtCore.QMetaObject.connectSlotsByName(Dialog)    def retranslateUi(self, Dialog):        _translate = QtCore.QCoreApplication.translate        Dialog.setWindowTitle(_translate("Dialog", "Exceler"))        item = self.tableWidget.horizontalHeaderItem(0)        item.setText(_translate("Dialog", "지출 일자"))        item = self.tableWidget.horizontalHeaderItem(1)        item.setText(_translate("Dialog", "팀"))        item = self.tableWidget.horizontalHeaderItem(2)        item.setText(_translate("Dialog", "사업"))        item = self.tableWidget.horizontalHeaderItem(3)        item.setText(_translate("Dialog", "품의 제목"))        item = self.tableWidget.horizontalHeaderItem(4)        item.setText(_translate("Dialog", "품의서 번호"))        item = self.tableWidget.horizontalHeaderItem(5)        item.setText(_translate("Dialog", "지출결의서 번호"))        item = self.tableWidget.horizontalHeaderItem(6)        item.setText(_translate("Dialog", "지출내용"))        item = self.tableWidget.horizontalHeaderItem(7)        item.setText(_translate("Dialog", "계정목"))        item = self.tableWidget.horizontalHeaderItem(8)        item.setText(_translate("Dialog", "예산"))        item = self.tableWidget.horizontalHeaderItem(9)        item.setText(_translate("Dialog", "품의 금액"))        item = self.tableWidget.horizontalHeaderItem(10)        item.setText(_translate("Dialog", "공급가액"))        item = self.tableWidget.horizontalHeaderItem(11)        item.setText(_translate("Dialog", "세액"))        item = self.tableWidget.horizontalHeaderItem(12)        item.setText(_translate("Dialog", "지출 금액"))        item = self.tableWidget.horizontalHeaderItem(13)        item.setText(_translate("Dialog", "잔액"))        self.checkBox.setText(_translate("Dialog", "지출 일자"))        self.checkBox_2.setText(_translate("Dialog", "팀"))        self.checkBox_3.setText(_translate("Dialog", "사업"))        self.checkBox_4.setText(_translate("Dialog", "품의 제목"))        self.checkBox_5.setText(_translate("Dialog", "품의서 번호"))        self.checkBox_6.setText(_translate("Dialog", "지출결의서 번호"))        self.checkBox_7.setText(_translate("Dialog", "지출내용"))        self.checkBox_8.setText(_translate("Dialog", "계정목"))        self.checkBox_9.setText(_translate("Dialog", "예산"))        self.checkBox_10.setText(_translate("Dialog", "품의금액"))        self.checkBox_11.setText(_translate("Dialog", "공급가액"))        self.checkBox_12.setText(_translate("Dialog", "세액"))        self.checkBox_13.setText(_translate("Dialog", "지출 금액"))        self.checkBox_14.setText(_translate("Dialog", "잔액"))        self.resetButton.setText(_translate("Dialog", "Reset"))        self.label.setText(_translate("Dialog", "Home"))        self.allButton.setText(_translate("Dialog", "All"))        self.shareLabel.setText(_translate("Dialog", "0"))        self.shareLabel_2.setText(_translate("Dialog", "0"))        self.shareLabel_3.setText(_translate("Dialog", "0"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tap1), _translate("Dialog", "Tab 1"))        item = self.tableWidget_2.horizontalHeaderItem(0)        item.setText(_translate("Dialog", "지출 일자"))        item = self.tableWidget_2.horizontalHeaderItem(1)        item.setText(_translate("Dialog", "팀"))        item = self.tableWidget_2.horizontalHeaderItem(2)        item.setText(_translate("Dialog", "사업"))        item = self.tableWidget_2.horizontalHeaderItem(3)        item.setText(_translate("Dialog", "품의 제목"))        item = self.tableWidget_2.horizontalHeaderItem(4)        item.setText(_translate("Dialog", "품의서 번호"))        item = self.tableWidget_2.horizontalHeaderItem(5)        item.setText(_translate("Dialog", "지출결의서 번호"))        item = self.tableWidget_2.horizontalHeaderItem(6)        item.setText(_translate("Dialog", "지출내용"))        item = self.tableWidget_2.horizontalHeaderItem(7)        item.setText(_translate("Dialog", "계정목"))        item = self.tableWidget_2.horizontalHeaderItem(8)        item.setText(_translate("Dialog", "예산"))        item = self.tableWidget_2.horizontalHeaderItem(9)        item.setText(_translate("Dialog", "품의 금액"))        item = self.tableWidget_2.horizontalHeaderItem(10)        item.setText(_translate("Dialog", "공급가액"))        item = self.tableWidget_2.horizontalHeaderItem(11)        item.setText(_translate("Dialog", "세액"))        item = self.tableWidget_2.horizontalHeaderItem(12)        item.setText(_translate("Dialog", "지출 금액"))        item = self.tableWidget_2.horizontalHeaderItem(13)        item.setText(_translate("Dialog", "잔액"))        self.searchButton.setText(_translate("Dialog", "Search"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Tab 2"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Dialog", "쪽"))        #self.getTable()        self.connectCheckBox()        self.getTable2()        self.tableWidget.itemDoubleClicked.connect(self.tableItemClicked)        self.tableWidget_2.itemDoubleClicked.connect(self.tableItemClicked_2)        self.resetButton.clicked.connect(self.getTable2)        self.allButton.clicked.connect(self.getTable)        self.searchButton.clicked.connect(self.search)        self.hideTableColumns(0,1)        self.setComboBox()    def search(self): #tab2 에서 검색시        text = self.comboBox.currentText()        sort = self.comboBox.currentIndex()        query = self.searchEdit.text()        print(text, sort , query)        self.tableWidget_2.setRowCount(100)        if sort is 0: #품의제목            self.hideTableColumns(2,2)            idx = 0            sql = "select * from Pum where Desc like '%"+query+"%'"            result = cur.execute(sql).fetchall()            sql = "select count(*) from Pum where Desc like '%" + query + "%'"            len = cur.execute(sql).fetchall()            bach = [4, 1, 2, 3, 9]            idx = 0            self.tableWidget_2.setRowCount(len[0][0])            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                pumNumb = row[0]                sql = "select Budget from Pum where Team = ? And Busy=?"                result2 = cur.execute(sql, (row[1], row[2])).fetchall()                item = QTableWidgetItem(str(format(result2[0][0], ',')))                self.tableWidget_2.setItem(idx, 8, item)                sql2 = "select sum(Prov),sum(Tax) from Spend where Pumnumb = '" + pumNumb + "'"                result2 = cur.execute(sql2).fetchall()                for mini in result2:                    prov = mini[0]                    tax = mini[1]                    if prov is None:                        prov = 0                    if tax is None:                        tax = 0                    totalSpend = prov + tax                    item = QTableWidgetItem(str(format(totalSpend, ',')))                    self.tableWidget_2.setItem(idx, 10, item)                item = QTableWidgetItem(str(format(row[4] - totalSpend, ',')))                self.tableWidget_2.setItem(idx, 13, item)                idx += 1        elif sort is 1: #품의서 번호            sql = "select * from Pum where Numb like '%" + query  + "%'"            result = cur.execute(sql).fetchall()            sql = "select count(*) from Pum where Numb like '%" + query + "%'"            len = cur.execute(sql).fetchall()            bach = [4, 1, 2, 3, 9]            idx = 0            self.tableWidget_2.setRowCount(len[0][0])            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                pumNumb = row[0]                sql = "select Budget from Pum where Team = ? And Busy=?"                result2 = cur.execute(sql, (row[1], row[2])).fetchall()                item = QTableWidgetItem(str(format(result2[0][0], ',')))                self.tableWidget_2.setItem(idx, 8, item)                sql2 = "select sum(Prov),sum(Tax) from Spend where Pumnumb = '" + pumNumb + "'"                result2 = cur.execute(sql2).fetchall()                for mini in result2:                    prov = mini[0]                    tax = mini[1]                    if prov is None:                        prov = 0                    if tax is None:                        tax = 0                    totalSpend = prov + tax                    item = QTableWidgetItem(str(format(totalSpend, ',')))                    self.tableWidget_2.setItem(idx, 10, item)                item = QTableWidgetItem(str(format(row[4] - totalSpend, ',')))                self.tableWidget_2.setItem(idx, 13, item)                idx += 1        elif sort is 2: #지출결의서 번호            sql = "select * from Spend where Numb like '%" + query + "%'"            result = cur.execute(sql).fetchall()            sql = "select count(*) from Spend where Numb like '%" + query + "%'"            len = cur.execute(sql).fetchall()            a = self.hideTableColumns(4, 2)            bach = [5, 0, 4, 7, 6, 10, 11]            idx = 0            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                sql = "select * from Pum where Numb = '" + row[2] + "'"                result2 = cur.execute(sql).fetchall()                print(result2[0])                thisTeam = result2[0][1]                thisBusy = result2[0][2]                thisPum = result2[0][3]                thisPumBudget = result2[0][4]                sql = "select Budget from Pum where Team = ? And Busy=?"                result2 = cur.execute(sql, (thisTeam,thisBusy)).fetchall()                thisBudget = result2[0][0]                sum = row[5] + row[6]                item = QTableWidgetItem(str(format(sum, ',')))                self.tableWidget_2.setItem(idx, 12, item)                item = QTableWidgetItem(str(thisTeam))                self.tableWidget_2.setItem(idx, 1, item)                item = QTableWidgetItem(str(thisBusy))                self.tableWidget_2.setItem(idx, 2, item)                item = QTableWidgetItem(str(thisPum))                self.tableWidget_2.setItem(idx, 3, item)                item = QTableWidgetItem(str(thisPumBudget))                self.tableWidget_2.setItem(idx, 9, item)                item = QTableWidgetItem(str(thisBudget))                self.tableWidget_2.setItem(idx, 8, item)                idx += 1        elif sort is 3: #지출 내용            sql = "select * from Spend where Desc like '%" + query + "%'"            result = cur.execute(sql).fetchall()            sql = "select count(*) from Spend where Desc like '%" + query + "%'"            len = cur.execute(sql).fetchall()            a = self.hideTableColumns(4, 2)            bach = [5, 0, 4, 7, 6, 10, 11]            idx=0            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                sql = "select * from Pum where Numb = '" + row[2] + "'"                result2 = cur.execute(sql).fetchall()                print(result2[0])                thisTeam = result2[0][1]                thisBusy = result2[0][2]                thisPum = result2[0][3]                thisPumBudget = result2[0][4]                sql = "select Budget from Pum where Team = ? And Busy=?"                result2 = cur.execute(sql, (thisTeam,thisBusy)).fetchall()                thisBudget = result2[0][0]                sum = row[5] + row[6]                item = QTableWidgetItem(str(format(sum, ',')))                self.tableWidget_2.setItem(idx, 12, item)                item = QTableWidgetItem(str(thisTeam))                self.tableWidget_2.setItem(idx, 1, item)                item = QTableWidgetItem(str(thisBusy))                self.tableWidget_2.setItem(idx, 2, item)                item = QTableWidgetItem(str(thisPum))                self.tableWidget_2.setItem(idx, 3, item)                item = QTableWidgetItem(str(thisPumBudget))                self.tableWidget_2.setItem(idx, 9, item)                item = QTableWidgetItem(str(thisBudget))                self.tableWidget_2.setItem(idx, 8, item)                idx += 1        self.tableWidget_2.resizeColumnsToContents()        self.coloring()    def setComboBox(self):        items = ["품의 제목","품의서 번호","지출결의서 번호","지출내용"]        self.comboBox.addItems(items)    def coloring(self): #한줄씩 회색으로 coloring        #self.tableWidget.item(0,0).setBackground(QtGui.QColor(192,192,192))        cnt = self.tableWidget.rowCount()        for i in range(cnt):            if i%2 is 1:                for j in range(14):                    item = self.tableWidget.item(i,j)                    if item is not None:                        item.setBackground(QtGui.QColor(192,192,192))        return    def hideTableColumns(self, screen,table): #상황에 맞는 표 출력을 위해 column 조절        onScreenColumns = []        if table is 1:            for i in range(14):                self.tableWidget.setColumnHidden(i, True)                checkBoxsB[i].setVisible(False)            if screen is 1: # 팀 - 사업                onScreenColumns = [2, 8, 9, 13]                for idx in onScreenColumns:                    print(idx)                    self.tableWidget.setColumnHidden(idx, False)                self.setCheckBoxVisible(onScreenColumns)                return onScreenColumns            elif screen is 2: #사업 클릭                onScreenColumns = [ 3, 4, 9, 10, 13]                for idx in onScreenColumns:                    self.tableWidget.setColumnHidden(idx, False)                self.setCheckBoxVisible(onScreenColumns)                return onScreenColumns            elif screen is 3: #품의서 클릭                onScreenColumns = [0,5,6,7,8,9,10,11,12]                for idx in onScreenColumns:                    self.tableWidget.setColumnHidden(idx, False)                self.setCheckBoxVisible(onScreenColumns)                return onScreenColumns            elif screen is 4:                onScreenColumns = [1,2, 8, 9, 13]                for idx in onScreenColumns:                    self.tableWidget.setColumnHidden(idx, False)                self.setCheckBoxVisible(onScreenColumns)                return onScreenColumns            else: #초기화                self.tableWidget.setColumnHidden(1, False)                a = list(range(14))                self.setCheckBoxVisible(a)        elif table is 2:            for i in range(14):                self.tableWidget_2.setColumnHidden(i, True)            if screen is 1: # 팀 - 사업                onScreenColumns = [2, 8, 9, 13]                for idx in onScreenColumns:                    print(idx)                    self.tableWidget_2.setColumnHidden(idx, False)                return onScreenColumns            elif screen is 2: #품의서 검색                onScreenColumns = [ 1,2,3, 4, 8, 9, 10, 13]                for idx in onScreenColumns:                    self.tableWidget_2.setColumnHidden(idx, False)                return onScreenColumns            elif screen is 3: #지출서 검색                onScreenColumns = [0,5,6,7,8,9,10,11,12]                for idx in onScreenColumns:                    self.tableWidget_2.setColumnHidden(idx, False)                return onScreenColumns            elif screen is 4:                onScreenColumns = list(range(13))                for idx in onScreenColumns:                    self.tableWidget_2.setColumnHidden(idx, False)                return onScreenColumns            else: #초기화                self.tableWidget_2.setColumnHidden(1, False)                a = list(range(14))            return    def setCheckBoxVisible(self,indexs): #표에 맞는 checkbox 조절        for i in checkBoxsB:            i.setVisible(False)        for i in indexs:            checkBoxsB[i].setVisible(True)    def connectCheckBox(self): #checkboxs 초기화        checkBoxsB.append(self.checkBox)        checkBoxsB.append(self.checkBox_2)        checkBoxsB.append(self.checkBox_3)        checkBoxsB.append(self.checkBox_4)        checkBoxsB.append(self.checkBox_5)        checkBoxsB.append(self.checkBox_6)        checkBoxsB.append(self.checkBox_7)        checkBoxsB.append(self.checkBox_8)        checkBoxsB.append(self.checkBox_9)        checkBoxsB.append(self.checkBox_10)        checkBoxsB.append(self.checkBox_11)        checkBoxsB.append(self.checkBox_12)        checkBoxsB.append(self.checkBox_13)        checkBoxsB.append(self.checkBox_14)        for idx, tmp in enumerate(checkBoxsB):            tmp.setChecked(True)            tmp.stateChanged.connect(partial(self.checkboxChecked, idx))        return    def checkboxChecked(self,numb): # checkBox 와 테이블 작용        if checkBoxs[numb] is True:            self.tableWidget.setColumnHidden(numb, True)  # 1번 column 안보이게            checkBoxs[numb] = False        else:            self.tableWidget.setColumnHidden(numb, False)  # 1번 column 안보이게            checkBoxs[numb] = True    global yesan    global pum    global spend    def getTable2(self): # 팀 출력으로 시작        self.label.setText("Home")        self.hideTableColumns(0,1)        self.tableWidget.clearContents()        team = []        cur.execute("select count(distinct Team) from Yesan")        len = cur.fetchall()        self.tableWidget.setRowCount(len[0][0])        sql = "select distinct Team from Yesan"        result = cur.execute(sql)        idx =0        for row in result:            item = QTableWidgetItem(str(row[0]))            self.tableWidget.setItem(idx, 1, item)            idx+=1        self.coloring()    def getTable(self): #팀-사업 출력으로 시작        self.label.setText("Home")        self.hideTableColumns(4,1)        self.tableWidget.clearContents()        saup = []        cur.execute("select * from Yesan")        yesan = cur.fetchall()        cur.execute("select * from Pum")        pum = cur.fetchall()        cur.execute("select * from spend")        spend = cur.fetchall()        idx = 0        cur.execute("select count(*) from Yesan")        len = cur.fetchall()        self.tableWidget.setRowCount(len[0][0])        #tmp = [1,2,8,9,13] //품의금액과 잔액 추가시        tmp = [1, 2, 8]        for row in yesan:            for idx2, val in enumerate(tmp):                if type(row[idx2]) is int:                    item = QTableWidgetItem(str(format(row[idx2],',')))                else:                    item = QTableWidgetItem(str(row[idx2]))                self.tableWidget.setItem(idx, val, item)            team = row[0]            busy = row[1]            totalBudget = row[2]            sql = "select sum(Budget) from Pum where Team = ? And Busy = ?"            result2 = cur.execute(sql, (team, busy)).fetchall()            for tmp2 in result2:                pumBudget = tmp2[0]                if tmp2[0] is None:                    pumBudget = 0                    item = QTableWidgetItem(str(0))                else:                    item = QTableWidgetItem(str(format(tmp2[0], ',')))                self.tableWidget.setItem(idx, 9, item)                item = QTableWidgetItem(str(format(totalBudget - pumBudget, ',')))                self.tableWidget.setItem(idx, 13, item)            idx +=1        self.tableWidget.resizeColumnsToContents()        self.coloring()    def tableItemClicked_2(self,item): #아이템을 더블클릭하면 하위 항목들을 출력한다.        print(item.text() ,item.column() ,item.row(),"---")        col = item.column()        ro = item.row()        if item.column() is 2: # 사업 클릭            text = self.label.text()            thisBusy = item.text()            self.label.setText(text + " > " + thisBusy)            thisTeam = self.tableWidget_2.item(ro,col-1).text()            thisBudget = self.tableWidget_2.item(ro,8).text()            self.tableWidget_2.clearContents()            sql = "select * from Pum where Team = ? And Busy=?"            result = cur.execute(sql,(thisTeam,thisBusy)).fetchall()            a = self.hideTableColumns(2,2)            bach = [4,1,2,3,9]            idx = 0            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                item = QTableWidgetItem(str(thisBudget))                self.tableWidget_2.setItem(idx, 8, item)                pumNumb = row[0]                sql2 = "select sum(Prov),sum(Tax) from Spend where Pumnumb = '"+pumNumb+"'"                result2 = cur.execute(sql2).fetchall()                for mini in result2:                    prov = mini[0]                    tax = mini[1]                    if prov is None:                        prov = 0                    if tax is None:                        tax = 0                    totalSpend = prov + tax                    item = QTableWidgetItem(str(format(totalSpend,',')))                    self.tableWidget_2.setItem(idx, 10, item)                item = QTableWidgetItem(str(format(row[4]-totalSpend, ',')))                self.tableWidget_2.setItem(idx, 13, item)                idx+=1        elif item.column() is 3: # 품의서 클릭            text = self.label.text()            thisPum = item.text()            thisBusy = self.tableWidget_2.item(ro, 1).text()            thisTeam = self.tableWidget_2.item(ro, 2).text()            thisBudget = self.tableWidget_2.item(ro, 8).text()            thisPumNumb = self.tableWidget_2.item(ro,col+1).text()            self.label.setText(text + " > " + thisPumNumb)            thisPumBudget = self.tableWidget_2.item(ro,9).text()            self.tableWidget_2.clearContents()            sql = "select * from Spend where Pumnumb = '"+thisPumNumb+"'"            result = cur.execute(sql).fetchall()            a = self.hideTableColumns(3,2)            bach = [5, 0, 4, 7, 6, 10, 11]            idx = 0            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                sum = row[5] + row[6]                item = QTableWidgetItem(str(format(sum, ',')))                self.tableWidget_2.setItem(idx, 12, item)                item = QTableWidgetItem(str(thisTeam))                self.tableWidget_2.setItem(idx, 1, item)                item = QTableWidgetItem(str(thisBusy))                self.tableWidget_2.setItem(idx, 2, item)                item = QTableWidgetItem(str(thisPum))                self.tableWidget_2.setItem(idx, 3, item)                item = QTableWidgetItem(str(thisBudget))                self.tableWidget_2.setItem(idx, 8, item)                item = QTableWidgetItem(str(thisPumBudget))                self.tableWidget_2.setItem(idx, 9, item)                idx+=1        elif item.column() is 1: #팀 선택            text = self.label.text()            thisTeam = item.text()            self.label.setText(text+" > "+thisTeam)            cur.execute("select count(*) from Yesan where Team = '"+thisTeam+"'")            len = cur.fetchall()            self.tableWidget_2.setRowCount(len[0][0])            cur.execute("select * from Yesan where Team = '"+thisTeam+"'")            result = cur.fetchall()            idx = 0            self.hideTableColumns(1,1)            # tmp = [1,2,8,9,13] //품의금액과 잔액 추가시            tmp = [1, 2, 8]            for row in result:                for idx2, val in enumerate(tmp):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget_2.setItem(idx, val, item)                team = row[0]                busy = row[1]                totalBudget = row[2]                sql = "select sum(Budget) from Pum where Team = ? And Busy = ?"                result2 = cur.execute(sql,(team,busy)).fetchall()                for tmp2 in result2:                    pumBudget = tmp2[0]                    if tmp2[0] is None:                        pumBudget=0                        item = QTableWidgetItem(str(0))                    else:                        item = QTableWidgetItem(str(format(tmp2[0],',')))                    self.tableWidget_2.setItem(idx, 9, item)                    item = QTableWidgetItem(str(format(totalBudget-pumBudget, ',')))                    self.tableWidget_2.setItem(idx, 13, item)                idx += 1        self.tableWidget_2.resizeColumnsToContents()    def tableItemClicked(self,item): #아이템을 더블클릭하면 하위 항목들을 출력한다.        print(item.text() ,item.column() ,item.row(),"---")        col = item.column()        ro = item.row()        if item.column() is 2: # 사업 클릭            text = self.label.text()            thisBusy = item.text()            self.label.setText(text + " > " + thisBusy)            thisTeam = self.tableWidget.item(ro,col-1).text()            thisBudget = self.tableWidget.item(ro,8).text()            self.tableWidget.clearContents()            sql = "select * from Pum where Team = ? And Busy=?"            result = cur.execute(sql,(thisTeam,thisBusy)).fetchall()            a = self.hideTableColumns(2,1)            bach = [4,1,2,3,9]            idx = 0            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget.setItem(idx, val, item)                item = QTableWidgetItem(str(thisBudget))                self.tableWidget.setItem(idx, 8, item)                pumNumb = row[0]                sql2 = "select sum(Prov),sum(Tax) from Spend where Pumnumb = '"+pumNumb+"'"                result2 = cur.execute(sql2).fetchall()                for mini in result2:                    prov = mini[0]                    tax = mini[1]                    if prov is None:                        prov = 0                    if tax is None:                        tax = 0                    totalSpend = prov + tax                    item = QTableWidgetItem(str(format(totalSpend,',')))                    self.tableWidget.setItem(idx, 10, item)                item = QTableWidgetItem(str(format(row[4]-totalSpend, ',')))                self.tableWidget.setItem(idx, 13, item)                idx+=1        elif item.column() is 3: # 품의서 클릭            text = self.label.text()            thisPum = item.text()            thisBusy = self.tableWidget.item(ro, 1).text()            thisTeam = self.tableWidget.item(ro, 2).text()            thisBudget = self.tableWidget.item(ro, 8).text()            thisPumNumb = self.tableWidget.item(ro,col+1).text()            self.label.setText(text + " > " + thisPumNumb)            thisPumBudget = self.tableWidget.item(ro,9).text()            self.tableWidget.clearContents()            sql = "select * from Spend where Pumnumb = '"+thisPumNumb+"'"            result = cur.execute(sql).fetchall()            a = self.hideTableColumns(3,1)            bach = [5, 0, 4, 7, 6, 10, 11]            idx = 0            for row in result:                for idx2, val in enumerate(bach):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget.setItem(idx, val, item)                sum = row[5] + row[6]                item = QTableWidgetItem(str(format(sum, ',')))                self.tableWidget.setItem(idx, 12, item)                item = QTableWidgetItem(str(thisTeam))                self.tableWidget.setItem(idx, 1, item)                item = QTableWidgetItem(str(thisBusy))                self.tableWidget.setItem(idx, 2, item)                item = QTableWidgetItem(str(thisPum))                self.tableWidget.setItem(idx, 3, item)                item = QTableWidgetItem(str(thisPumBudget))                self.tableWidget.setItem(idx, 9, item)                item = QTableWidgetItem(str(thisBudget))                self.tableWidget.setItem(idx, 8, item)                idx+=1        elif item.column() is 1: #팀 선택            text = self.label.text()            thisTeam = item.text()            self.label.setText(text+" > "+thisTeam)            cur.execute("select count(*) from Yesan where Team = '"+thisTeam+"'")            len = cur.fetchall()            self.tableWidget.setRowCount(len[0][0])            cur.execute("select * from Yesan where Team = '"+thisTeam+"'")            result = cur.fetchall()            idx = 0            self.hideTableColumns(1,1)            # tmp = [1,2,8,9,13] //품의금액과 잔액 추가시            tmp = [1, 2, 8]            for row in result:                for idx2, val in enumerate(tmp):                    if type(row[idx2]) is int:                        item = QTableWidgetItem(str(format(row[idx2], ',')))                    else:                        item = QTableWidgetItem(str(row[idx2]))                    self.tableWidget.setItem(idx, val, item)                team = row[0]                busy = row[1]                totalBudget = row[2]                sql = "select sum(Budget) from Pum where Team = ? And Busy = ?"                result2 = cur.execute(sql,(team,busy)).fetchall()                for tmp2 in result2:                    pumBudget = tmp2[0]                    if tmp2[0] is None:                        pumBudget=0                        item = QTableWidgetItem(str(0))                    else:                        item = QTableWidgetItem(str(format(tmp2[0],',')))                    self.tableWidget.setItem(idx, 9, item)                    item = QTableWidgetItem(str(format(totalBudget-pumBudget, ',')))                    self.tableWidget.setItem(idx, 13, item)                idx += 1        self.tableWidget.resizeColumnsToContents()        self.coloring()if __name__ == "__main__":    import sys    app = QtWidgets.QApplication(sys.argv)    Dialog = QtWidgets.QDialog()    ui = Ui_Dialog()    ui.setupUi(Dialog)    Dialog.show()    sys.exit(app.exec_())